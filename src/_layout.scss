// Bootstrap fix for older Safari.
.row:before,
.row:after {
  width: 0;
}

/**
 * Containers.
 */
$containers: (
  'xs': 500px,
  'sm': 700px,
  'md': 800px,
  'lg': 1000px,
  'xl': 1160px,
);
[class*="container"] {
  margin-left: auto;
  margin-right: auto;
  padding-left: $grid-gutter-width / 2;
  padding-right: $grid-gutter-width / 2 ;
  position: relative;
  clear:both;
}
@each $size, $value in $containers {

  @if( $size == 'xl' ) {
    .container {
      max-width: $value;
    }
  }
  @else {
    .container-#{$size} {
      max-width: $value;
    }
  }
}


/**
 * Relative positioning.
 */
@mixin position-relative() {
  position: relative !important;
}
.rel {
  @include position-relative();
}
@each $bp, $size in $grid-breakpoints {

  @if( str-index( $bp, 'xxl' ) == null ) {
    @include media-breakpoint-up( $bp ) {
      .#{$bp}\:rel {
        @include position-relative();
      }
    }
  }
}

/**
 * Absolute positioning.
 */
@mixin position-absolute() {
  position: absolute;
}
.abs {
  @include position-absolute();
}
@each $bp, $size in $grid-breakpoints {

  @if( str-index( $bp, 'xxl' ) == null ) {
    @include media-breakpoint-up( $bp ) {
      .#{$bp}\:abs {
        @include position-absolute();
      }
    }
  }
}
/**
 * Fixed.
 */
@mixin position-fixed() {
  position: fixed !important;
}
.fixed {
  @include position-fixed();
}

/**
 * Top.
 */
@mixin top( $value ) {
 top: $value;
}
@each $spacer, $value in $spacers {
 .top-#{$spacer} {
   @include top( $value );
 }
 @each $bp, $size in $grid-breakpoints {

   @if( str-index( $bp, 'xxl' ) == null ) {
     @include media-breakpoint-up( $bp ) {
       .#{$bp}\:top-#{$spacer} {
         @include top( $value );
       }
     }
   }
 }
}

/**
 * Bottom
 */
@mixin bottom( $value ) {
 bottom: $value;
}
@each $spacer, $value in $spacers {
 .bottom-#{$spacer} {
   @include bottom( $value );
 }
 @each $bp, $size in $grid-breakpoints {

   @if( str-index( $bp, 'xxl' ) == null ) {
     @include media-breakpoint-up( $bp ) {
       .#{$bp}\:bottom-#{$spacer} {
         @include bottom( $value );
       }
     }
   }
 }
}
/**
* Left.
*/
@mixin left( $value ) {
  left: $value;
}
@each $spacer, $value in $spacers {
  .left-#{$spacer} {
    @include left( $value );
  }
  @each $bp, $size in $grid-breakpoints {

    @if( str-index( $bp, 'xxl' ) == null ) {
      @include media-breakpoint-up( $bp ) {
        .#{$bp}\:left-#{$spacer} {
          @include left( $value );
        }
      }
    }
  }
}
/**
* Right.
*/
@mixin right( $value ) {
  right: $value;
}
@each $spacer, $value in $spacers {
  .right-#{$spacer} {
    @include right( $value );
  }
  @each $bp, $size in $grid-breakpoints {

    @if( str-index( $bp, 'xxl' ) == null ) {
      @include media-breakpoint-up( $bp ) {
        .#{$bp}\:right-#{$spacer} {
          @include right( $value );
        }
      }
    }
  }
}

/**
 * Vertically centered.
 */
@mixin vertically-centered() {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}
.vert-centered {
  @include vertically-centered();
}
@each $bp, $size in $grid-breakpoints {

  @if( str-index( $bp, 'xxl' ) == null ) {
    @include media-breakpoint-up( $bp ) {
      .#{$bp}\:vert-centered {
        @include vertically-centered();
      }
    }
  }
}


/**
 * Horizontally centered.
 */
 @mixin horizontally-centered() {
   margin-left: auto;
   margin-right: auto;
   left: 0;
   right: 0;
}
.horz-centered {
  @include horizontally-centered();
}
@each $bp, $size in $grid-breakpoints {

  @if( str-index( $bp, 'xxl' ) == null ) {
    @include media-breakpoint-up( $bp ) {
      .#{$bp}\:horz-centered {
        @include horizontally-centered();
      }
    }
  }
}

/**
 * Absolute centered.
 */
 @mixin absolute-centered() {
  position: absolute;
  @include vertically-centered();
  @include horizontally-centered();
}
.abs-centered {
 @include absolute-centered();
}
@each $bp, $size in $grid-breakpoints {

  @if( str-index( $bp, 'xxl' ) == null ) {
    @include media-breakpoint-up( $bp ) {
      .#{$bp}\:abs-centered {
        @include absolute-centered();
      }
    }
  }
}

/**
 * Rotate
 */
 $rotations: (
  '45',
  '90',
  '180'
);
@mixin rotate( $degrees ) {
  position: relative;
  display: inline-block;
  transform: rotate( #{$degrees}deg );
}
@each $degrees in $rotations {

  @if( $degrees == '180' ) {
    .rotate-#{$degrees} {
      @include rotate( $degrees );
    }
  }
  @else {
    .rotate-#{$degrees} {
      @include rotate( $degrees );
    }
    .-rotate-#{$degrees} {
      @include rotate( -#{$degrees} );
    }
  }
}


/**
* Overflow.
*/
.oflow-hidden {
  overflow: hidden;
}

/**
 * Overlays.
 */
@mixin overlay() {
  position: absolute;
  top: 0;
  left: 0;
  min-height: 100%;
  width: 100%;
  z-index: 1;

  + * {
    z-index: 2;

    &:not(.abs):not(.abs-centered):not(.ovlay) {
      position: relative;
    }
  }
}
.ovlay {
  @include overlay();
}
@each $bp, $size in $grid-breakpoints {

  @if( str-index( $bp, 'xxl' ) == null ) {
    @include media-breakpoint-up( $bp ) {
      .#{$bp}\:ovlay {
        @include overlay();
      }
    }
  }
}



/**
 * Negative margins.
 */
$negative_margins: (
  ml: 'margin-left',
  mr: 'margin-right',
  mt: 'margin-top',
  mb: 'margin-bottom',
);
@each $spacer, $value in $spacers {
  @each $key, $property in $negative_margins {

    @if $spacer != 0 {

      .-#{$key}-#{$spacer} {
        #{$property}: calc( #{$value} * -1 );
      }

      @each $bp, $size in $grid-breakpoints {

        @if( str-index( $bp, 'xxl' ) == null ) {
          @include media-breakpoint-up( $bp ) {
            .#{$bp}\:-#{$key}-#{$spacer} {
              #{$property}: calc( #{$value} * -1 )
            }
          }
        }
      }

    }
  }
}

/**
 * Temporary.
 */
// .right-0 {
//   right: 0;
// }
// .right-1 {
//   right: 0.25rem;
// }
// .right-2 {
//   right: 0.5rem;
// }

/**
 * Padding ratio.
 */
@mixin padding-ratio( $ratio ) {

  $length: str-length( $ratio );
  $sep: str-index( $ratio, '-' );
  $numerator: str-slice( $ratio, $sep + 1, $length );
  $denominator: str-slice( $ratio, 0, $sep - 1 );
  $value: to-number( $numerator ) / to-number( $denominator );
  padding-top: percentage( $value);
  position: relative;
  overflow: hidden;

}
$ratios: (
  '2.5-1',
  '2-1',
  '1.5-1',
  '1.25-1',
  '1-1',
);
@each $ratio in $ratios {

  $selector: str-replace( $ratio, '.', '\\.' );

  .ra-#{$selector} {
    @include padding-ratio( $ratio );
  }
  @each $bp, $size in $grid-breakpoints {

    @if( str-index( $bp, 'xxl' ) == null ) {
      @include media-breakpoint-up( $bp ) {
        .#{$bp}\:ra-#{$selector} {
          @include padding-ratio( $ratio );
        }
      }
    }

  }

}

/**
 * Section before footer padding.
 */
.pb-footer {
  padding-bottom: 6.5rem;

  @include media-breakpoint-up( md ) {
    padding-bottom: 9.5rem;
  }
}

/**
 * Column padding.
 */
@mixin column-padding() {
  padding-left: var( --col-padding );
  padding-right: var( --col-padding );
}
.p-col,
.col-padding {
  @include column-padding();
}
@each $bp, $size in $grid-breakpoints {

  @if( str-index( $bp, 'xxl' ) == null ) {
    @include media-breakpoint-up( $bp ) {
      .#{$bp}\:p-col {
        @include column-padding();
      }
    }
  }

}

/**
 * Negative column padding (margins)
 */
@mixin negative-column-padding() {
  margin-left: calc( #{$col-padding} * -1 );
  margin-right: calc( #{$col-padding} * -1 );
};
.-col-padding {
  @include negative-column-padding();
}

@each $bp, $size in $grid-breakpoints {

 @if( str-index( $bp, 'xxl' ) == null ) {
   @include media-breakpoint-up( $bp ) {
     .#{$bp}\:-col-padding {
       @include column-padding();
     }
   }
 }
}

.clearfix {
  @include clearfix();
}

/**
 * WP Alignment classes.
 */
 /* ------ = WP. = --------------------------------------------------------------------- */
.aligncenter {
  display: block;
  margin-left: auto;
  margin-right: auto;
  height: auto;
}
@include media-breakpoint-up( md ) {
  .alignright {
    float: right;
    margin-left: auto;
    max-width: 50%;
    margin-left: 1.5rem;
    margin-bottom: 1rem;
    height: auto;
  }
  .alignleft {
    float: left;
    margin-left: auto;
    max-width: 50%;
    margin-right: 1.5rem;
    margin-bottom: 1rem;
    height: auto;
  }
}


/**
* Z-index.
*/
$z-indexes: (
  1,
  2,
  3
);
@mixin z-index( $value ) {
 z-index: $value;
}
@each $value in $z-indexes {
 .z-#{$value} {
   @include z-index( $value );
 }
 @each $bp, $size in $grid-breakpoints {

   @if( str-index( $bp, 'xxl' ) == null ) {
     @include media-breakpoint-up( $bp ) {
       .#{$bp}\:z-#{$value} {
         @include z-index( $value );
       }
     }
   }
 }
}
.-z {
  z-index: -999;
}