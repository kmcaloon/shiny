/**
* Abstracts used throughout the app.
*
* Note that this file should never actually output code processed by a browser.
*/
@import 'sass-rem/rem';
// @import '../static/fonts/ddicons/variables';
// $icomoon-font-family: 'ddicons';
// $icomoon-font-path: '../static/fonts/ddicons/fonts';



/* ------ = Functions. = --------------------------------------------------------------------- */

/*
 * Returns the individual RGB values of a given hexadecimal color value
 *
 * Values are rounded in order to make it compatible with the output of other
 * color functions like e.g. lighten()/darken()
 *
 * @param {string} $color.
 */
@function hex-to-rgb( $color ) {
	@return round( red( $color ) ), round( green( $color ) ), round( blue( $color ) );
}

/**
 * Color.
 *
 * @param {string} $color-name
 * @return {string}
 */
@function color( $color-name ) {
	@return map-get( $colors, #{$color-name} );
}


/*
* String replace.
*
* Replace `$search` with `$replace` in `$string`
* @author Hugo Giraudel
* @param {String} $string - Initial string
* @param {String} $search - Substring to replace
* @param {String} $replace ('') - New value
* @return {String} - Updated string
*/
@function str-replace( $string, $search, $replace: '' ) {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}


/**
 * Px to em.
 *
 * @param {string} $px
 * @param {string} $context
 */
$base: 16px;
@function em( $px, $context: $base ) {
  $num: $px / $context;
  @return #{$num / ($num * 0 + 1)}em;
}

/*
 * Map deep get.
 *
 * @author Hugo Giraudel.
 * @param {map} $map.
 * @param {map} $keys
 */
@function map-deep-get($map, $keys...) {

  @each $key in $keys {
    $map: map-get($map, $key);
  }

  @return $map;

}

/*
 * Slightly lighten a color
 *
 * @param {Color} $color - color to tint
 * @param {Number} $percentage - percentage of `$color` in returned color
 */
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

/*
 *  Slightly darken a color
 *
 * @param {Color} $color - color to shade
 * @param {Number} $percentage - percentage of `$color` in returned color
 */
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}


/**
 * Background.
 *
 * @param {string} $filename
 */
@function bg( $filename, $component: true ) {

	@return url('#{$dist_dir}/img/#{$filename}');

}

/**
 * Convert variable to number.
 *
 * @param 	{mixed}		$value
 * @return 	{num}
*/
@function to-number( $value ) {
	@if type-of( $value ) == 'number' {
	  @return $value;
	}
	@else if type-of( $value ) != 'string' {
	  @error 'Value for `to-number` should be a number or a string.';
	}

	$result: 0;
	$digits: 0;
	$minus: str-slice($value, 1, 1) == '-';
	$numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

	@for $i from if($minus, 2, 1) through str-length($value) {
	  $character: str-slice($value, $i, $i);

	  @if (index(map-keys($numbers), $character) or $character == '.') {
	    @if $character == '.' {
	      $digits: 1;
	    } @else if $digits == 0 {
	      $result: $result * 10 + map-get($numbers, $character);
	    } @else {
	      $digits: $digits * 10;
	      $result: $result + map-get($numbers, $character) / $digits;
	    }
	  }
	}

	@return if($minus, -$result, $result);;
}

/* ------ = Helpers. = --------------------------------------------------------------------- */

/**
 * General classes for the utility.
 *
 * @param 	{map}			$util
 * @param 	{string}	$util[class]
 * @param 	{string}	$util[styles]
 * @param		{bool}		$util[responsive]		Optiona. Default true.
 */
// @mixin generate-utility( $util ) {
// 	$class: map-get( $util, 'class' );
// 	$styles: map-get( $util, 'styles' );
//
// 	// Default.
// 	.#{$class} {
// 		#{$styles}
// 	}
//
// 	// Loop over each breakpoint
//
//
//
// }

@mixin pseudo() {
  content: '';
  display: block;
  position: absolute;
}

@mixin flip-horz() {
  display: inline-block;
  transform: scaleX(-1);
  filter: FlipH;
}
@mixin flip-vert() {
  display: inline-block;
  transform: scaleY(-1);
  filter: FlipV;
}

@mixin srt() {
	border: 0;
	clip: rect(1px, 1px, 1px, 1px);
	clip-path: inset(50%);
	height: 1px;
	margin: -1px;
	overflow: hidden;
	padding: 0;
	position: absolute;
	width: 1px;
	word-wrap: normal !important;
}
@mixin srt-only-focusable() {
  &:active,
  &:focus {
    position: static;
    width: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    clip: auto;
  }
}

@mixin cleanlist() {
  list-style: none;
  padding: 0;
  margin: 0;

  li {
    list-style-type: none;
  }
}

@mixin inlinelist() {
  @include cleanlist();

  > li {
    display: inline-block;
  }
}

@mixin overlay() {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}
@mixin over-overlay() {
  position: relative;
  z-index: 2;
}
@mixin grayscale() {
  filter: url("data:image/svg+xml;utf8,&lt;svg xmlns=\'http://www.w3.org/2000/svg\'&gt;&lt;filter id=\'grayscale\'&gt;&lt;feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/&gt;&lt;/filter&gt;&lt;/svg&gt;#grayscale"); /* Firefox 10+, Firefox on Android */
  filter: gray; /* IE6-9 */
  -webkit-filter: grayscale(100%); /* Chrome 19+, Safari 6+, Safari 6+ iOS */
}

/*-------------------------------------
= POSITIONING
--------------------------------------*/

/* Vertically Center Child Elements */
@mixin vertical-container() {
  display: table;

  .vertical-content {
    display: table-cell;
    vertical-align: middle;
  }
}

/* Center Element */
@mixin centered( $important: false) {

  @if( $important == false ) {
    left: 0;
    right: 0;
    margin-left: auto;
    margin-right: auto;
  }
  @else {
    left: 0 !important;
    right: 0 !important;
    margin-left: auto !important;
    margin-right: auto !important;
  }

}

/** Vertically Centered **/
@mixin vertically-centered( $important: false ) {
  position: absolute;
  top: 50%;
  transform: translateY( -50% );
}

/** Absolute Centered */
@mixin absolute-centered( $important: false ) {
  position: absolute;

  @if( $important == false ) {
    top: 50%;
    left: 50%;
    transform: translate( -50%, -50% );
  }
  @else {
    top: 50% !important;
    left: 50% !important;
    transform: translate( -50%, -50% ) !important;
  }
}

/* Height = Width */
@mixin equal-height() {
  position: relative;

  .content {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  &:before {
    content: '';
    display: block;
    padding-top: 100%;
  }
}

@mixin clearfix() {
	&:after {
		content: '.';
		display: block;
		height: 0;
		width: 0;
		clear: both;
		visibility: hidden;
		overflow: hidden;
	}
}

/*-----------------------------------------
    = Imagery
------------------------------------------*/

/**
 * Background.
 *
 * @param {string} $filename
 */
@mixin bg( $filename ) {
  background-image: url('#{$path-img}/#{$filename}');
}

@mixin full-bg( $size: 'cover' ) {
  background-repeat: no-repeat;
  background-position: center;

  @if( $size == 'cover' ) {
    background-size: cover;
  }
  @else if( $size == 'full-width' ) {
    background-size: 100% auto;
  }

}


/*
 * Image replace.
 *
 * Make element into an image.
 *
 * @param {string} $img
 * @param {string} $width
 * @param {string} $height
 * @param {string} $display
*/
@mixin img-replace($img, $width, $height, $display: block) {
  width: $width;
  height: $height;
  background-image: url('#{$path--img}/#{$img}');
  background-repeat: no-repeat;
  background-size: 100% 100%;
  display: $display;
}

/**
 * Grayscale background.
 */
@mixin grayscale-bg() {
  -moz-filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale");
  -o-filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale");
  -webkit-filter: grayscale(100%);
  filter: gray;
  filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale");
}

/**
 * Faded out.
*/
@mixin faded-out() {
  opacity: 0;
  z-index: -9;
  // transition: opacity $main-transition,
  // z-index 0s $main-transition;
}

/**
* Faded in.
*/
@mixin faded-in( $z-index: 1 ) {
  opacity: 1;
  z-index: $z-index;
  // transition: opacity $main-transition,
  z-index: 0s;

}

/*-----------------------------------------
    = Accessibility.
------------------------------------------*/
@mixin hide-content-accessibly {
	clip: rect( 1px, 1px, 1px, 1px );
	height: 1px;
	overflow: hidden;
	position: absolute;
	width: 1px;
}

@mixin no-select {
	-webkit-touch-callout: none;
	-webkit-user-select: none;
	-khtml-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
}



/* ------ = Grid & Spacing. = --------------------------------------------------------------------- */




/*-----------------------------------------
    = Spacing.
------------------------------------------*/

/**
 * Column padding.
 */
@mixin col-padding() {
  padding-left: var( --col-padding );
	padding-right: var( --col-padding );
}


/* ------ = Typography. = --------------------------------------------------------------------- */

/*-----------------------------------------
= FEATURES
------------------------------------------*/

@mixin ot--small-caps() {
  font-variant-caps: small-caps;
  -moz-font-feature-settings: "smcp";
  -webkit-font-feature-settings: "smcp";
  font-feature-settings: "smcp";
}
@mixin ot--kerning() {
  font-kerning: normal;
  -moz-font-feature-settings: "kern";
  -webkit-font-feature-settings: "kern";
  font-feature-settings: "kern";
}
@mixin unicode--latin() {
  unicode-range: U+000-5FF;
}

/*-----------------------------------------
    = Styles.
------------------------------------------*/

/**
 * Base style.
 */
@mixin f-style-base() {
  font-family: var( --f-base );
  font-weight: 400;
	color: var( --black );
	font-size: 1rem;
}



/* ------ = Graphical = --------------------------------------------------------------------- */

/**
 * Circle.
 */
@mixin circle( $size: null, $important: false ) {
	width: $size;
	height: $size;
	border-radius: 50%;
	overflow: hidden;

	@if $important {
		width: $size !important;
		height: $size !important;
	}
}

/* ------ = Shareable UI = --------------------------------------------------------------------- */

/**
 * Hover themes.
 */
 // $hover-themes: (
 // 	color: (
	//  	main:
	//  	hovered:
 // 	),
 // );
 @mixin hover-theme( $color, $type: 'text' ) {

 	@if $type == 'text' {
 		color: map-deep-get( $hover-themes, $color, 'main' ) !important;

 		&:hover {
 			color: map-deep-get( $hover-themes, $color, 'hovered' ) !important;
 		}
 	}
 	@else if $type == 'background' {
 		background-color:	map-deep-get( $hover-themes, $color, 'main' ) !important;
		&:hover {
			background-color: map-deep-get( $hover-themes, $color, 'hovered' ) !important;
		}
 	}

 }